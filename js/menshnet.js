
import  * as mqtt from 'node_modules/paho-mqtt/paho-mqtt-min.js';

const SETUP_CMD      = "https://menshnet.online/api/setup";
const DISCONNECT_CMD = "https://menshnet.online/api/disconnect";
const START_CMD      = "https://menshnet.online/api/start";
const STOP_CMD       = "https://menshnet.online/api/stop";
const HEARTBEAT_CMD  = "https://menshnet.online/api/heartbeat";

const MENSHNET_ADDR = "menshnet.online";
const MENSHNET_PORT = 9000;

function uuidv4() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

class Messenger {
    function constructor(apiKey) {
        this.apiKey = apiKey        

        // for receiving events only 
        this.mqttc = new Paho.MQTT.Client(MENSHNET_ADDR, MENSHNET_PORT, uuidv4());
        
        // set callback handlers
        this.mqttc.onMessageArrived = this.onMessageArrived;

        // connect the client
        this.mqttc.connect();

        this.handlers = {};
        // default simple minded error handler
        this.service_outage = function(err) {alert(err)}; 
    }

    function register(topic, handler) {
        this.handlers[topic] = handler;
        this.mqttc.subscribe(topic); 
    }

    function unregister(topic) {
        if (typeof this.handlers[topic] !== 'undefined') {
            this.mqttc.unsubscribe(topic);
            delete this.handlers[topic];
        }
    }

    function onMessageArrived(message) {
        var handler = this.handlers[message.topic];
        if (typeof handler !== 'undefined') {
            handler( JSON.parse(message.payloadString) );
        }
    }

    function _json_post(_url, _data, _on_success) {
        $.ajax({
            url: _url,
            type: 'post',
            dataType: 'json',
            contentType: 'application/json',
            fail: function() {
                this.service_outage("HTTPS post failed");
            },
            success: _on_success,
            data: JSON.stringify(_data)
        });
    }


    function setup() {
        /*
        Setup communication for receinging events and sending
        commands.    

        apiKey: apiKey which is generated by menshnet and is available on the
                user dashboard page.

        on_ready: if supplied then setup will not block rather it will
                  call on_ready when messenger is ready to process 
                  commands. Otherwise this call shall block.

        Return:
            A list of pipeline names that teh end user dfined in thier git repo. 
        */
        
        // validate apikey
        this._json_post(SETUP_CMD, {
                "apiKey": self.apiKey 
            },  
            (data) => {
                this.pipeline_names = JSON.parse(data);
                console.log(this);
            }
        );
    }
}


